@page "/"
@inject NavigationManager navManager
@using DataLibrary
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using todoWebsite.Models
@using Microsoft.Extensions.Configuration
@inject IDataAccess _data
@inject IConfiguration _config
@inject ProtectedSessionStorage sessionStorage


<div>
    <div class="col-md-4 col-xl-3 search-box">
      
        <input type="text" placeholder="Search Tasks"
               aria-lable="Search box" class="form-control rounded-control"
               @oninput="((txt)=> OnSearchInput((string)txt.Value))" />
        
    </div>
    
    <div>
    
    @if (task == null)
    {
    <p><em>Loading...</em></p>
    }
    else if( task == null && everythingLoaded ==true){
            <h1>All your tasks are complete!</h1>
        }
        else
        {
            {<h1>All your tasks!</h1>
                @foreach (var p in searchTasks)
                {
                    <p>
                        @if (p.completed != 1)
                        {
                            <div class="flex-container">
                                <div class="task-number column">
                                    <div class="circle-around-number">
                                        @p.idtasks
                                    </div>
                                </div>
                                <div class="column">
                                    <h5>Task description:</h5> @p.task
                                </div>
                                <div class="column">
                                    <h5> Date created:</h5>
                                    @p.dateCreated.ToString("yyyy-MM-dd")
                                </div>
                                <div class="">
                                    <button class="complete-button btn btn-primary " @onclick="()=> TaskCompletion(p.idtasks)">Complete Task!!</button>
                                </div>
                            </div>
                        }
                    </p>
                   


                }
        }
       }
     </div>
       
</div>




@code {
    List<TaskModel> task;
    List<TaskModel> searchTasks;

    bool everythingLoaded =false;
    private TaskModel taskModel = new();
    private string searchText = "";
    bool searchInputReady = false;
    protected override async Task OnInitializedAsync()
    {
        string sql = "select * from tasks";

        System.Console.WriteLine("this is a test");
        task = await _data.LoadData<TaskModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));
        searchTasks = task;
        searchTasks = await _data.LoadData<TaskModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));
        everythingLoaded = true;
    }
    private async void TaskCompletion(int taskID) => await CompleteTask(taskID);

    private async Task NotCompleted(int taskID)
    {

        string sql = $"update tasks set completed = @completed where idtasks = @idtasks";
        await _data.SavaData(sql, new { completed = 0, idtasks = taskID, }, _config.GetConnectionString("default"));
        navManager.NavigateTo("/");
    }
    private async Task CompleteTask(int taskID)
    {

        string sql = $"update tasks set completed = @completed where idtasks = @idtasks";
        await _data.SavaData(sql, new { completed = 1, idtasks = taskID, }, _config.GetConnectionString("default"));
        navManager.NavigateTo("/");


    }
    private async Task OnSearchInput(string userInput)
    {
        searchText = userInput;
        await FilterOptions();
    }

    //update so that the case does not matter

    private async Task FilterOptions()
    {
        searchTasks = task; 
        var output = searchTasks;
        var userInput = searchText;
        List<TaskModel> temp = new();


        
        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            List<int> taskIds = new();
            foreach (var i in task)
            {
                if (i.task.Contains(searchText))
                {
                    taskIds.Add(i.idtasks);
                }
            }

            foreach(var i in output)
            {
                foreach(var j in taskIds)
                {
                    if(i.idtasks == j)
                    {
                        if (!temp.Contains(i))
                        {
                            temp.Add(i);
                        }
                    }
                   }
            }
            searchTasks = null;
            searchTasks = temp;
        }
        if (string.IsNullOrWhiteSpace(searchText))
        {
           searchTasks = task;
        }
        searchInputReady = true;
        
         await SaveFilterState();
    }
    private async Task SaveFilterState()
    {

        await sessionStorage.SetAsync(nameof(searchText), searchText);

    }
}
