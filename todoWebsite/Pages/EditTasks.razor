@page "/editatask"

<PageTitle>Edit a task</PageTitle>

@inject NavigationManager navManager
@using DataLibrary
@using todoWebsite.Models
@using Microsoft.Extensions.Configuration
@inject IModalService modal
@inject IDataAccess _data
@inject IConfiguration _config
@inject IJSRuntime JSRuntime


<h1>Edit a Task</h1>

 @if (task == null)
    {
    <p><em>Loading...</em></p>
    }
    else if( task == null && everythingLoaded ==true){
        <h1>All your tasks are complete!</h1>
    }
    else
    {
        <h1>All your tasks!</h1>


        @foreach (var p in task)
        {
            <p>
               
                    <div class="flex-container">
                    <div class="task-number column">
                        <div class="circle-around-number">
                           @p.idtasks
                        </div>
                        </div>
                        <div class="column">
                         Task description: @p.task
                        </div>
                        <div class="column">
                        Date created: @p.dateCreated.ToString("yyyy-MM-dd")
                        </div>
                        <div class="">
                        <button class="complete-button btn btn-primary " @onclick="()=> TaskCompletion(p.idtasks)">
                            Complete Task!
                        </button>
                        <div class="complete-button btn btn-primary" @onclick="()=>EditTask(p.idtasks)">
                            Delete Task!
                        </div>
                    </div>
                    </div>
                
            </p>
        }

    }
    




@code {
    List<TaskModel> task;
    bool everythingLoaded =false;
    private TaskModel taskModel = new();
    private TaskModel popupTask = new();

    protected override async Task OnInitializedAsync()
    {
        string sql = "select * from tasks";


        task = await _data.LoadData<TaskModel, dynamic>(sql, new { }, _config.GetConnectionString("default"));

        everythingLoaded = true;
    }
    private async void TaskCompletion(int taskID) => await CompleteTask(taskID);


    private async Task EditTask(int taskID)
    {
        foreach (var item in task)
        {
            if(item.idtasks == taskID){
                popupTask = item;
            }
        }
        DeleteTask();
        navManager.NavigateTo("/");

    }
    private async void DeleteTask(){
        string sql = $"DELETE from Tasks where idtasks = {popupTask.idtasks}";
        await _data.SavaData(sql, new { }, _config.GetConnectionString("default"));
    }
  
    private async Task NotCompleted(int taskID)
    {

        string sql = $"update tasks set completed = @completed where idtasks = @idtasks";
        await _data.SavaData(sql, new { completed = 0, idtasks = taskID, }, _config.GetConnectionString("default"));
        navManager.NavigateTo("/");
    }
    private async Task CompleteTask(int taskID)
    {

        string sql = $"update tasks set completed = @completed where idtasks = @idtasks";
        await _data.SavaData(sql, new { completed = 1, idtasks = taskID, }, _config.GetConnectionString("default"));
        navManager.NavigateTo("/");


    }
   
    
 }
